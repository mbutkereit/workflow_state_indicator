<?php

/**
 * @file
 * Module file for customized workflow integration.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Url;

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function workflow_state_indicator_block_view_local_tasks_block_alter(array &$build, BlockPluginInterface $block) {
  $user = \Drupal::currentUser();

  if ($user->hasPermission('access workflow indicator')) {
    $build['#pre_render'][] = 'workflow_state_indicator_local_task_block_render';
  }
}

/**
 * Custom pre_render function for the local task block.
 */
function workflow_state_indicator_local_task_block_render($build) {
  $default_value = 'none';

  // Todo add it to all entity types.
  $request = \Drupal::request();
  $entity = $request->attributes->get('node');
  $route = $request->attributes->get('_route');

  $config = \Drupal::config('workflow_state_indicator.settings');
  $local_task_visible = $config->get('local_task');
  if (is_int($local_task_visible) && !$local_task_visible) {
    return $build;
  }

  if ($entity instanceof ContentEntityInterface &&
    $route == 'entity.node.canonical') {
    $moderation_state = $entity->moderation_state->value;

    /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
    $moderation_info = Drupal::service('content_moderation.moderation_information');

    /** @var \Drupal\workflows\WorkflowInterface $workflow */
    $workflow = $moderation_info->getWorkflowForEntity($entity);
    $workflow_id = $workflow->id();

    $active_state = $workflow->getTypePlugin()->getState($moderation_state);
    $state_id = $active_state->id();
    $state_name = !empty($active_state->label()) ? $active_state->label() : $state_id;

    if (!empty($moderation_state)) {

      $config = \Drupal::config('workflow_state_indicator.settings');
      $states = $config->get('states');

      if (isset($states[$workflow_id][$state_id]['color'])) {
        $default_value = $states[$workflow_id][$state_id]['color'];
      }

      $build['content'] = [
        $build['content'],
        [
          '#theme' => 'workflow_state_indicator',
          '#background_color' => $default_value,
          '#state_name' => $state_name,
        ],
      ];
    }
  }

  return $build;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function workflow_state_indicator_form_workflow_state_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form['actions']['submit']['#submit'][] = 'workflow_state_indicator_submit_handler';

  /** @var \Drupal\workflows\Entity\Workflow $entity */
  $entity = $form_state->getFormObject()->getEntity();
  $workflow_id = $entity->id();

  $config = \Drupal::config('workflow_state_indicator.settings');
  $states = $config->get('states');

  $state_name = '';

  if (isset($form['id']['#type']) &&
    $form['id']['#type'] == 'machine_name') {
    $state_name = $form['id']['#default_value'];
  }

  $default_value = '';

  if (isset($states[$workflow_id][$state_name]['color'])) {
    $default_value = $states[$workflow_id][$state_name]['color'];
  }
  $form['workflow_state_indicator'] = [
    '#type' => 'details',
    '#title' => t('Workflow State Indicator'),
    '#open' => TRUE,
  ];

  $form['workflow_state_indicator']['workflow_state_color'] = [
    '#type' => 'textfield',
    '#title' => t('Color'),
    '#description' => t('Enter the color code for the workflow state background. Note that the color must be hexadecimal e.g #000000.'),
    '#required' => FALSE,
    '#default_value' => $default_value,
  ];

}

/**
 * Implements hook_toolbar().
 */
function workflow_state_indicator_toolbar() {
  $user = \Drupal::currentUser();

  if (!$user->hasPermission('access workflow indicator')) {
    return [];
  }

  $config = \Drupal::config('workflow_state_indicator.settings');
  $admin_menu_visible = $config->get('admin_menu');
  if (is_int($admin_menu_visible) && !$admin_menu_visible) {
    return [];
  }

  $items['workflow_state_indicator'] = [
    '#cache' => [
      'contexts' => [
        'user.permissions',
        'url',
      ],
    ],
  ];

  // Todo add it to all entity types.
  $request = \Drupal::request();
  $entity = $request->attributes->get('node');
  $route = $request->attributes->get('_route');
  if ($entity instanceof ContentEntityInterface &&
    $route == 'entity.node.canonical') {
    $moderation_state = $entity->moderation_state->value;

    /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
    $moderation_info = Drupal::service('content_moderation.moderation_information');

    /** @var \Drupal\workflows\WorkflowInterface $workflow */
    $workflow = $moderation_info->getWorkflowForEntity($entity);
    $workflow_id = $workflow->id();

    $active_state = $workflow->getTypePlugin()->getState($moderation_state);
    $state_id = $active_state->id();
    $state_name = !empty($active_state->label()) ? $active_state->label() : $state_id;

    if (!empty($moderation_state)) {

      $config = \Drupal::config('workflow_state_indicator.settings');
      $states = $config->get('states');

      if (isset($states[$workflow_id][$state_id]['color'])) {
        $default_value = $states[$workflow_id][$state_id]['color'];
      }

      $cache_tag = $entity->getEntityType()->id() . ':' . $entity->id();

      $items['workflow_state_indicator'] += [
        '#type' => 'toolbar_item',
        'tab' => [
          '#type' => 'link',
          '#title' => $state_name,
          '#url' => Url::fromRoute('workflow_state_indicator.settings', [], ['query' => \Drupal::destination()->getAsArray()]),
          '#attributes' => [
            'title' => t('Current workflow state'),
            'class' => ['use-ajax', 'toolbar-icon', 'toolbar-icon-workflow-state-indicator', 'toolbar-icon-system-admin-content'],
            'style' => ['background:' . $default_value . ';'],
          ],
          '#cache' => ['tags' => [$cache_tag]],
        ],
        '#weight' => 502,
      ];
    }
  }

  return $items;
}

/**
 * A separate submit handler for the workflow_state_edit form.
 *
 * In the normal workflow_state_edit form is it only possible
 * to save the default values, everything else will be saved
 * but are not easy accessible. This is the reason why we create
 * a separate config for the workflow state indicator.
 */
function workflow_state_indicator_submit_handler(&$form, FormStateInterface &$form_state) {
  /** @var \Drupal\workflows\Entity\Workflow $entity */
  $entity = $form_state->getFormObject()->getEntity();

  $workflow_name = $entity->id();
  $state_name = $form_state->getValue('id');

  $config = \Drupal::service('config.factory')
    ->getEditable('workflow_state_indicator.settings');

  $old_config = $config->get('states');
  $old_config[$workflow_name][$state_name]['color'] = $form_state->getValue('workflow_state_color');
  $config->set('states', $old_config)->save();
}

/**
 * Implements hook_theme()
 */
function workflow_state_indicator_theme($existing, $type, $theme, $path) {
  return [
    'workflow_state_indicator' => [
      'variables' => [
        'background_color' => NULL,
        'state_name' => NULL,
      ],
    ],
  ];
}
